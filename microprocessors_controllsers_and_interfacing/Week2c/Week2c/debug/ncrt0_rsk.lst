* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;*************************************************************************** ;
     2                                  ; C COMPILER for R8C/Tiny, M16C/60,30,20,10
     3                                  ; Copyright(C) 1999(2000-2004). Renesas Technology Corp.
     4                                  ; and Renesas Solutions Corp., All rights reserved.
     5                                  ;
     6                                  ;
     7                                  ; ncrt0.a30 : NC30 startup program
     8                                  ;
     9                                  ; This program is applicable when using the basic I/O library
    10                                  ;       
    11                                  ; $Id: ncrt0.a30,v 1.27.4.4 2004/10/29 14:06:38 simomura Exp $
    12                                  ;
    13                                  ;***************************************************************************
    14                                  
    15                                  ;--------------------------------------------------------------------
    16                                  ; set size of monitor area for FoUSB
    17                                  ;--------------------------------------------------------------------
    18                                  .if	_KD_
    19                            X     .if	_Firmware_space == 0
    20                            X     .else
    21                            X     .endif
    22                                  .endif
    23                                  ;---------------------------------------------------------------------
    24                                  ; HEEP SIZE definition
    25                                  ;---------------------------------------------------------------------
    26                                  .if	__HEAP__ == 1 
    27  00000000h                       HEAPSIZE	.equ	0H
    28                                  .else
    29                            X     .if	__HEAPSIZE__ == 0
    30                            X     .else
    31                            X     .endif
    32                                  .endif
    33                                  
    34                                  ;---------------------------------------------------------------------
    35                                  ; STACK SIZE definition
    36                                  ;---------------------------------------------------------------------
    37                                  .if	__USTACKSIZE__ == 0
    38                            X     .if	__R8C__ != 1
    39                            X     .else
    40                            X     .endif
    41                                  .else
    42  00000300h                       STACKSIZE	.equ	__USTACKSIZE__
    43                                  .endif
    44                                  
    45                                  ;---------------------------------------------------------------------
    46                                  ; INTERRUPT STACK SIZE definition
    47                                  ;---------------------------------------------------------------------
    48                                  .if	__ISTACKSIZE__ == 0
    49                            X     .if	__R8C__ != 1
    50                            X     .else
    51                            X     .endif
    52                                  .else
    53  00000300h                       ISTACKSIZE	.equ	__ISTACKSIZE__
    54                                  .endif
    55                                  
    56                                  ;---------------------------------------------------------------------
    57                                  ; INTERRUPT VECTOR ADDRESS  definition
    58                                  ;---------------------------------------------------------------------
    59                                  .if	__R8C__ != 1
    60                                  .if	_KD_ == 1
    61                                  .else
    62  000FFD00h                       VECTOR_ADR 	.equ	0ffd00h
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    63  000FFE00h                       SVECTOR_ADR 	.equ	0ffe00h
    64                                  .endif // _KD_
    65                                  .else
    66                                  .endif
    67                                  
    68                                  ;---------------------------------------------------------------------
    69                                  ; Section allocation
    70                                  ;---------------------------------------------------------------------
    71                                  	.list OFF
    72                                  	.list ON
    73                                  
    74                                  ;---------------------------------------------------------------------
    75                                  ; SBDATA area definition
    76                                  ;---------------------------------------------------------------------
    77                                  	.glb	__SB__
    78  00000400h                       __SB__	.equ	data_SE_top
    79                                  
    80                                  ;====================================================================
    81                                  ; Initialize Macro declaration
    82                                  ;---------------------------------------------------------------------
    83                             D    N_BZERO	.macro	TOP_ ,SECT_
    84                             D    	mov.b	#00H, R0L
    85                             D    	mov.w	#(TOP_ & 0FFFFH), A1
    86                             D    	mov.w	#sizeof SECT_ , R3
    87                             D    	sstr.b	
    88                                  	.endm
    89                                  
    90                             D    N_BCOPY .macro	FROM_,TO_,SECT_
    91                             D    	mov.w	#(FROM_ & 0FFFFH),A0
    92                             D    	mov.b	#(FROM_ >>16),R1H
    93                             D    	mov.w	#TO_ ,A1
    94                             D    	mov.w	#sizeof SECT_ , R3
    95                             D    	smovf.b
    96                                  	.endm
    97                                  
    98                             D    BZERO	.macro	TOP_,SECT_
    99                             D    	push.w	#sizeof SECT_ >> 16
   100                             D    	push.w	#sizeof SECT_  & 0ffffh
   101                             D    	pusha	TOP_ >>16
   102                             D    	pusha	TOP_ & 0ffffh
   103                             D    	.stk	8
   104                             D    	.glb	_bzero	
   105                             D    	.call	_bzero,G
   106                             D    	jsr.a	_bzero
   107                                  	.endm
   108                                  
   109                             D    BCOPY	.macro	FROM_ ,TO_ ,SECT_
   110                             D    	push.w	#sizeof SECT_  >> 16
   111                             D    	push.w	#sizeof SECT_  & 0ffffh
   112                             D    	pusha	TO_ >>16
   113                             D    	pusha	TO_  & 0ffffh
   114                             D    	pusha	FROM_ >>16
   115                             D    	pusha	FROM_  & 0ffffh
   116                             D    	.stk	12
   117                             D    	.glb	_bcopy
   118                             D    	.call   _bcopy,G
   119                             D    	jsr.a	_bcopy
   120                                  	.endm
   121                                  
   122                                  .if	__R8C__ != 1
   123                                  ;
   124                                  ; for M16C/60,30,20,10 series
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   125                                  ;
   126                                  ;		.glb	__BankSelect
   127                                  ;__BankSelect	.equ	0BH
   128                                  
   129                                  ;---------------------------------------------------------------
   130                                  ; special page definition
   131                                  ;---------------------------------------------------------------
   132                                  ;       macro define for special page
   133                                  ;
   134                                  ;Format:
   135                                  ;	SPECIAL	number
   136                                  ;
   137                                  
   138                             D    SPECIAL	.macro	NUM
   139                             D    	.org	0FFFFEH-(NUM*2)
   140                             D    	.glb	__SPECIAL_@NUM
   141                             D    	.word	__SPECIAL_@NUM  & 0FFFFH
   142                                  .endm
   143                                  ;====================================================================
   144                                  ; Interrupt section start
   145                                  ;---------------------------------------------------------------------
   146                                  	.insf	start,S,0
   147                                  	.glb	start
   148                                  	.section	interrupt
   149  00000                           start:
   150                                  ;---------------------------------------------------------------------
   151                                  ; after reset,this program will start
   152                                  ;---------------------------------------------------------------------
   153  00000  EB400000r                	ldc	#istack_top,	isp	;set istack pointer
   154  00004  C7020A00              S  	mov.b	#02h,0ah
   155  00008  B70400                Z  	mov.b	#00h,04h		;set processer mode 
   156  0000B  B70A00                Z  	mov.b	#00h,0ah
   157  0000E  EB308000                 	ldc	#0080h,	flg
   158  00012  EB500000r                	ldc	#stack_top,	sp	;set stack pointer 
   159  00016  EB600004                 	ldc	#data_SE_top,	sb	;set sb register 
   160  0001A  EB200F00                 	ldintb	#VECTOR_ADR
               EB1000FD 
   161                                  
   162                                  ;====================================================================
   163                                  ; NEAR area initialize.
   164                                  ;--------------------------------------------------------------------
   165                                  ; bss zero clear
   166                                  ;--------------------------------------------------------------------
   167                                  	N_BZERO	bss_SE_top,bss_SE
   168  00022  B4                  M Z  	mov.b	#00H, R0L
   169  00023  AA0000r             M S  	mov.w	#(bss_SE_top & 0FFFFH), A1
   170  00026  75C30000r           M    	mov.w	#sizeof bss_SE , R3
   171  0002A  7CEA                M    	sstr.b	
   172                             M    	.endm
   173                                  	N_BZERO	bss_SO_top,bss_SO
   174  0002C  B4                  M Z  	mov.b	#00H, R0L
   175  0002D  AA0000r             M S  	mov.w	#(bss_SO_top & 0FFFFH), A1
   176  00030  75C30000r           M    	mov.w	#sizeof bss_SO , R3
   177  00034  7CEA                M    	sstr.b	
   178                             M    	.endm
   179                                  	N_BZERO	bss_NE_top,bss_NE
   180  00036  B4                  M Z  	mov.b	#00H, R0L
   181  00037  AA0000r             M S  	mov.w	#(bss_NE_top & 0FFFFH), A1
   182  0003A  75C30000r           M    	mov.w	#sizeof bss_NE , R3
   183  0003E  7CEA                M    	sstr.b	
   184                             M    	.endm
   185                                  	N_BZERO	bss_NO_top,bss_NO
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 004

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   186  00040  B4                  M Z  	mov.b	#00H, R0L
   187  00041  AA0000r             M S  	mov.w	#(bss_NO_top & 0FFFFH), A1
   188  00044  75C30000r           M    	mov.w	#sizeof bss_NO , R3
   189  00048  7CEA                M    	sstr.b	
   190                             M    	.endm
   191                                  
   192                                  ;---------------------------------------------------------------------
   193                                  ; initialize data section
   194                                  ;---------------------------------------------------------------------
   195                                  	N_BCOPY data_SEI_top,data_SE_top,data_SE
   196  0004A  A20000r             M S  	mov.w	#(data_SEI_top & 0FFFFH),A0
   197  0004D  74C300r             M    	mov.b	#(data_SEI_top >>16),R1H
   198  00050  AA0004              M S  	mov.w	#data_SE_top ,A1
   199  00053  75C30000r           M    	mov.w	#sizeof data_SE , R3
   200  00057  7CE8                M    	smovf.b
   201                             M    	.endm
   202                                  	N_BCOPY	data_SOI_top,data_SO_top,data_SO
   203  00059  A20000r             M S  	mov.w	#(data_SOI_top & 0FFFFH),A0
   204  0005C  74C300r             M    	mov.b	#(data_SOI_top >>16),R1H
   205  0005F  AA0000r             M S  	mov.w	#data_SO_top ,A1
   206  00062  75C30000r           M    	mov.w	#sizeof data_SO , R3
   207  00066  7CE8                M    	smovf.b
   208                             M    	.endm
   209                                  	N_BCOPY	data_NEI_top,data_NE_top,data_NE
   210  00068  A20000r             M S  	mov.w	#(data_NEI_top & 0FFFFH),A0
   211  0006B  74C300r             M    	mov.b	#(data_NEI_top >>16),R1H
   212  0006E  AA0000r             M S  	mov.w	#data_NE_top ,A1
   213  00071  75C30000r           M    	mov.w	#sizeof data_NE , R3
   214  00075  7CE8                M    	smovf.b
   215                             M    	.endm
   216                                  	N_BCOPY	data_NOI_top,data_NO_top,data_NO
   217  00077  A20000r             M S  	mov.w	#(data_NOI_top & 0FFFFH),A0
   218  0007A  74C300r             M    	mov.b	#(data_NOI_top >>16),R1H
   219  0007D  AA0000r             M S  	mov.w	#data_NO_top ,A1
   220  00080  75C30000r           M    	mov.w	#sizeof data_NO , R3
   221  00084  7CE8                M    	smovf.b
   222                             M    	.endm
   223                                  
   224                                  ;====================================================================
   225                                  ; FAR area initialize.
   226                                  ;---------------------------------------------------------------------
   227                                  ; bss zero clear
   228                                  ;---------------------------------------------------------------------
   229                                  	BZERO	bss_FE_top,bss_FE
   230  00086  7DE20000r           M    	push.w	#sizeof bss_FE >> 16
   231  0008A  7DE20000r           M    	push.w	#sizeof bss_FE  & 0ffffh
   232  0008E  7D9F0000r           M    	pusha	bss_FE_top >>16
   233  00092  7D9F0000r           M    	pusha	bss_FE_top & 0ffffh
   234                             M    	.stk	8
   235                             M    	.glb	_bzero	
   236                             M    	.call	_bzero,G
   237  00096  FD000000r           M A  	jsr.a	_bzero
   238                             M    	.endm
   239                                  	BZERO	bss_FO_top,bss_FO
   240  0009A  7DE20000r           M    	push.w	#sizeof bss_FO >> 16
   241  0009E  7DE20000r           M    	push.w	#sizeof bss_FO  & 0ffffh
   242  000A2  7D9F0000r           M    	pusha	bss_FO_top >>16
   243  000A6  7D9F0000r           M    	pusha	bss_FO_top & 0ffffh
   244                             M    	.stk	8
   245                             M    	.glb	_bzero	
   246                             M    	.call	_bzero,G
   247  000AA  FD000000r           M A  	jsr.a	_bzero
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 005

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   248                             M    	.endm
   249                                  
   250                                  ;---------------------------------------------------------------------
   251                                  ; Copy edata_E(O) section from edata_EI(OI) section
   252                                  ;---------------------------------------------------------------------
   253                                  	BCOPY	data_FEI_top,data_FE_top,data_FE
   254  000AE  7DE20000r           M    	push.w	#sizeof data_FE  >> 16
   255  000B2  7DE20000r           M    	push.w	#sizeof data_FE  & 0ffffh
   256  000B6  7D9F0100            M    	pusha	data_FE_top >>16
   257  000BA  7D9F0000            M    	pusha	data_FE_top  & 0ffffh
   258  000BE  7D9F0000r           M    	pusha	data_FEI_top >>16
   259  000C2  7D9F0000r           M    	pusha	data_FEI_top  & 0ffffh
   260                             M    	.stk	12
   261                             M    	.glb	_bcopy
   262                             M    	.call   _bcopy,G
   263  000C6  FD000000r           M A  	jsr.a	_bcopy
   264                             M    	.endm
   265                                  	BCOPY	data_FOI_top,data_FO_top,data_FO
   266  000CA  7DE20000r           M    	push.w	#sizeof data_FO  >> 16
   267  000CE  7DE20000r           M    	push.w	#sizeof data_FO  & 0ffffh
   268  000D2  7D9F0000r           M    	pusha	data_FO_top >>16
   269  000D6  7D9F0000r           M    	pusha	data_FO_top  & 0ffffh
   270  000DA  7D9F0000r           M    	pusha	data_FOI_top >>16
   271  000DE  7D9F0000r           M    	pusha	data_FOI_top  & 0ffffh
   272                             M    	.stk	12
   273                             M    	.glb	_bcopy
   274                             M    	.call   _bcopy,G
   275  000E2  FD000000r           M A  	jsr.a	_bcopy
   276                             M    	.endm
   277                                  
   278  000E6  EB500000r                	ldc	#stack_top,sp
   279                                  	.stk	-40
   280                                  
   281                                  ;====================================================================
   282                                  ; heap area initialize
   283                                  ;---------------------------------------------------------------------
   284                                  .if __HEAP__ != 1
   285                                  .endif
   286                                  
   287                                  ;====================================================================
   288                                  ; Initialize standard I/O
   289                                  ; _init changed to _initialise 08/07/05 DDE
   290                                  ;---------------------------------------------------------------------
   291                                  ;.if __STANDARD_IO__ == 1
   292                                  	.glb	_Initialise
   293                                  	.call	_Initialise,G
   294  000EA  FD000000r             A  	jsr.a	_Initialise
   295                                  ;.endif
   296                                  
   297                                  ;====================================================================
   298                                  ; Call main() function
   299                                  ; Main called from initialise() in resetprg.c 08/07/05 DDE
   300                                  ;---------------------------------------------------------------------
   301                                  ;	ldc	#0h,fb	; for debuger
   302                                  
   303                                  ;	.glb	_main
   304                                  ;	jsr.a	_main
   305                                  
   306                                  .else	; __R8C__
   307                            X     .if __HEAP__ != 1
   308                            X     .endif
   309                            X     .if __STANDARD_IO__ == 1
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Fri Oct 30 09:59:39 2015  PAGE 006

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   310                            X     .endif
   311                                  .endif	; __R8C__
   312                                  
   313                                  ;====================================================================
   314                                  ; exit() function
   315                                  ;---------------------------------------------------------------------
   316                                  	.glb	_exit
   317                                  	.glb	$exit
   318  000EE                           _exit:			   ; End program
   319  000EE                           $exit:
   320  000EE  FEFF                  B  	jmp	_exit
   321                                  	.einsf
   322                                  ;====================================================================
   323                                  ; dummy interrupt function
   324                                  ;---------------------------------------------------------------------
   325                                  	.glb	dummy_int
   326  000F0                           dummy_int:
   327  000F0  FB                       	reit
   328                                  
   329                                  	.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00329   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0001536(00600H)  stack
DATA     0000000(00000H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
DATA     0000000(00000H)  data_FE
DATA     0000000(00000H)  bss_FE
DATA     0000000(00000H)  data_FO
DATA     0000000(00000H)  bss_FO
ROMDATA  0000000(00000H)  rom_FE
ROMDATA  0000000(00000H)  rom_FO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  data_FEI
ROMDATA  0000000(00000H)  data_FOI
ROMDATA  0000000(00000H)  switch_table
CODE     0000000(00000H)  program
CODE     0000000(00000H)  interrupt
CODE     0000000(00000H)  program_S
ROMDATA  0000256(00100H)  vector
ROMDATA  0000000(00000H)  svector
ROMDATA  0000004(00004H)  fvector
CODE     0000241(000F1H)  interrupt
